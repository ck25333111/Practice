"""
üî• –ó–∞–¥–∞—á–∞ ‚Ññ1: –ß—ë—Ç–Ω—ã–µ –∏ –Ω–µ—á—ë—Ç–Ω—ã–µ
–£—Å–ª–æ–≤–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–ü—Ä–∏–º–µ—Ä: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 10  –í—ã–≤–æ–¥: 0 2 4 6 8 10
–£—Å–ª–æ–∂–Ω—ë–Ω–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é): –°–¥–µ–ª–∞–π, —á—Ç–æ–±—ã —á–∏—Å–ª–∞ –≤—ã–≤–æ–¥–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
"""
from importlib.resources import read_text


def even_and_odd():
    N = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: '))

    gen_numb = (i for i in range(N+1) if i % 2 == 0)
    print('Generator')
    print(', '.join(str(num) for num in gen_numb))

    print('\nfunc map filter')
    filter_num = map(str, filter(lambda x: x%2==0, range(N+1)))
    print(' '.join(filter_num))

    # –†–µ—à–µ–Ω–∏–µ –æ—Ç GPT
    print(', '.join(str(i) for i in range(int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")) + 1) if i % 2 == 0))

#******************

"""
üß† –ó–∞–¥–∞—á–∞ ‚Ññ2: –ü–∞–ª–∏–Ω–¥—Ä–æ–º
–£—Å–ª–æ–≤–∏–µ:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É. –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º ‚Äî —Ç–æ –µ—Å—Ç—å —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.
–ü—Ä–∏–º–µ—Ä—ã:

–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: –∫–∞–∑–∞–∫
–í—ã–≤–æ–¥: –ø–∞–ª–∏–Ω–¥—Ä–æ–º

–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: –ø–∏—Ç–æ–Ω
–í—ã–≤–æ–¥: –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º

–£—Å–ª–æ–∂–Ω—ë–Ω–∫–∞:
–•–æ—á–µ—à—å —Ñ–ª–µ–∫—Å–∏—Ç—å? –£–±–µ—Ä–∏ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ "–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞" —Ç–æ–∂–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å –∫–∞–∫ –ø–∞–ª–∏–Ω–¥—Ä–æ–º üòè
"""
def palindrome():
    word = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:').lower().replace(' ','')
    print('–ø–∞–ª–∏–Ω–¥—Ä–æ–º' if word == word[::-1] else '–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')



"""
üßÆ –ó–∞–¥–∞—á–∞ ‚Ññ3: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ø—ã—Ç–æ–∫
–£—Å–ª–æ–≤–∏–µ:
–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100. –ù–µ–∫–∏–π —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–¥—É–º–∞–ª –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö (–º—ã —Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π secret).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ù–æ! –í–º–µ—Å—Ç–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è "–≤ –ª–æ–±", –∏—Å–ø–æ–ª—å–∑—É–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
üéØ –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
–ü–æ–ø—ã—Ç–∫–∞ 1: –ø—Ä–æ–±—É—é 50
–ë–æ–ª—å—à–µ!
–ü–æ–ø—ã—Ç–∫–∞ 2: –ø—Ä–æ–±—É—é 75
–ú–µ–Ω—å—à–µ!
...
–£–≥–∞–¥–∞–ª! –ß–∏—Å–ª–æ: 63. –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫: 5

"""
import random
def guess_the_number():
    hidden_number = random.randint(1, 100)
    low = 1
    higt = 100
    count = 0

    while True:
        guess = (higt + low) // 2
        count += 1
        if hidden_number < guess :
            print(f'–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {higt}')
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {count} –ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ: {guess }')
            higt = guess -1
        elif hidden_number > guess :
            print(f'–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {higt}')
            print(f'–ü–æ–ø—ã—Ç–∫–∞ {count} –ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ: {guess }')
            low = guess +1
        elif hidden_number == guess :
            print('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ',hidden_number)
            print('–û—Ç–≥–∞–¥–∞–Ω–æ–µ: ', guess )
            break


"""
üßÆ –ó–∞–¥–∞—á–∞ ‚Ññ4: –ë–∏–Ω–∞—Ä–Ω—ã–π –ü–æ–∏—Å–∫ –ø–æ –°–ø–∏—Å–∫—É:
üìã –£—Å–ª–æ–≤–∏–µ:
–£ —Ç–µ–±—è –µ—Å—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
–ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å -1.
–ü—Ä–∏–º–µ—Ä:

arr = [3, 8, 15, 23, 42, 55, 78, 90]
target = 42
# –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å 4

"""
unsorted = [2, 15, 18, 11, 56, 5, 21, 45, 65, 89, 45, 12, 63, 74, 2, 1, 36]
arr = sorted(unsorted)
print(arr)

def binary_search(arr, target):
    low = 0
    hight = len(arr)-1

    while low <= hight:
        mid = (low + hight) // 2
        if arr[mid] > target:
            hight = mid - 1
            print(f"–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {hight}")
        elif arr[mid] < target:
            low = mid + 1
            print(f"–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {hight}")
        elif arr[mid] == target:
            return f'–ß–∏—Å–ª–æ {target} –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ {mid}'
    return -1



"""
–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É —Ä–µ–∫—É—Ä—Å–∏–µ–π
"""
low = 0
hight = len(arr)-1

def binary_search_recurse(arr, target, low, hight):
    if low > hight:
        return -1
    mid = (low + hight) // 2
    if arr[mid] == target:
        return (f'–ß–∏—Å–ª–æ {target} –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ {mid}')
    elif arr[mid] > target:
        hight = (mid - 1)
        print(f"–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {hight}")
        return binary_search_recurse(arr, target, low, hight)
    else:
        low = (mid + 1)
        print(f"–ò—â–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {low} –¥–æ {hight}")
        return binary_search_recurse(arr, target, low, hight)




if __name__ == '__main__':
    # even_and_odd()
    # palindrome()
    # guess_the_number()
    # print(binary_search(arr, 15))
    print(binary_search_recurse(arr, 655, low, hight))
