# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

from typing import Dict, Any, Optional
from datetime import datetime
from loguru._handler import Message
import os

def parse_log_message(message: Message) -> Dict[str, Optional[Any]]:
    """
    Sink –¥–ª—è Loguru: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–µ –æ—Ç Loguru.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –±–∞–∑—ã.
    """
    record = message.record

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    log_time: datetime = record.get('time', datetime.now())
    level = record["level"].name if record.get("level") is not None else "INFO"
    log_message = record["message"] if record.get("message") is not None else "absent"
    file_path = (
        record["file"].path
        if record.get("file") is not None and hasattr(record["file"], "path")
        else "absent"
    )
    line_no = record["line"] if record.get("line") is not None else -1
    func_name = record["function"] if record.get("function") is not None else "absent"
    module_name = os.path.splitext(os.path.basename(file_path))[0] if file_path else None

    # Exception - –µ—Å–ª–∏ –µ—Å—Ç—å, –±–µ—Ä–µ–º —Å—Ç–µ–∫ + —Å–æ–æ–±—â–µ–Ω–∏–µ
    exception_str: Optional[str] = None
    if record.get('exception'):
        exception_str = str(record['exception'])

    parsed = {
        # "time": log_time,
        # "level": level,
        # "message": log_message,
        # "file": file_path,
        # "line": line_no,
        # "function": func_name,
        "stack_trace": exception_str,
        "module": module_name
    }
    print("üì¶ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ª–æ–≥:", parsed)  # üëà –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è


    return {
        "time": log_time,
        "level": level,
        "message": log_message,
        "file": file_path,
        "line": line_no,
        "function": func_name,
        "exception": exception_str,
        "module": module_name,
    }