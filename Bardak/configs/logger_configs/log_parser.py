# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# log_parser.py
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏:
# - smart_parse_log: –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ —Ç–∏–ø—É –≤—Ö–æ–¥–∞
# - parse_loguru_message: –ø–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç Loguru Message - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –±–∞–∑—ã Logs
# - parse_log_file_line: –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

from typing import Dict, Any, Optional, Union
from datetime import datetime
from loguru._handler import Message
import os

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def smart_parse_log(source: Union[Message, str]) -> Dict[str, Any]:
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: Message –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞"""
    if isinstance(source, Message):
        return parse_loguru_message(source)
    elif isinstance(source, str):
        return parse_log_file_line(source)
    else:
        raise TypeError(f"–¢–∏–ø {type(source)} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ª–æ–≥-–ø–∞—Ä—Å–∏–Ω–≥–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–∞—Ä—Å–∏—Ç loguru (message: Message) –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª-–ª–æ–≥.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def parse_loguru_message(message: Message) -> Dict[str, Optional[Any]]:
    """
    Sink –¥–ª—è Loguru: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞ Message
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–µ –æ—Ç Loguru.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª-–ª–æ–≥.
    """
    record = message.record
    # print('record - ', record)

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    log_time: datetime = record.get('time', datetime.now())
    level = record["level"].name if record.get("level") is not None else "INFO"
    log_message = record["message"] if record.get("message") is not None else "absent"
    file_path = (record["file"].path if record.get("file") is not None and hasattr(record["file"], "path") else "absent")
    line_no = record["line"] if record.get("line") is not None else -1
    func_name = record["function"] if record.get("function") is not None else "absent"
    module_name = os.path.splitext(os.path.basename(file_path))[0] if file_path and file_path != "absent" else "unknown"

    # Exception - –µ—Å–ª–∏ –µ—Å—Ç—å, –±–µ—Ä–µ–º —Å—Ç–µ–∫ + —Å–æ–æ–±—â–µ–Ω–∏–µ
    stack_trace: Optional[str] = None
    if record.get('exception'):
        stack_trace = str(record['exception'])

    # parsed = {
    #     "time": log_time,
    #     "level": level,
    #     "message": log_message,
    #     "file": file_path,
    #     "line": line_no,
    #     "function": func_name,
    #     "stack_trace": stack_trace,
    #     "module": module_name
    # }
    # print("üì¶ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ª–æ–≥:", parsed)  # üëà –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è


    return {
        "time": log_time,
        "level": level,
        "message": log_message,
        "file": file_path,
        "line": line_no,
        "function": func_name,
        "stack_trace": stack_trace,
        "module": module_name,
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç (line: str) –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ü–∞—Ä—Å–∏—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def parse_log_file_line(line: str) -> Dict[str, Any]:
    """
    –û–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞:
    23-05-2025 14:12:34 | INFO     | my_module:my_func:42 - –°–æ–æ–±—â–µ–Ω–∏–µ
    :param line: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
    :return: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    try:
        date_part, rest = line.split(" | ", 1)
        level_part, rest = rest.split(" | ", 1)
        location_part, message_part = rest.split(" - ", 1)

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        log_time = datetime.strptime(date_part.strip(), "%d-%m-%Y %H:%M:%S.%f")
        level = level_part.strip()
        module, function, line_no = location_part.strip().split(":")

        return {
            "time": log_time,
            "level": level,
            "message": message_part.strip(),
            "file": "from_log_file",
            "line": int(line_no),
            "function": function,
            "stack_trace": None,
            "module": module,
        }

    except Exception as e:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞: {line!r} ‚Üí {e}")