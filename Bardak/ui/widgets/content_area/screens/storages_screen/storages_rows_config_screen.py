# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Bardak/ui/widgets/content_area/content_area/screens/storages_rows_config_screen.py
# –≠–∫—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—Å–µ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

from kivy.uix.screenmanager import Screen
from kivy.properties import NumericProperty, ListProperty
from Bardak.ui.widgets.common.simple_label_inputs import SimpleLabelInputs
from Bardak.ui.widgets.content_area.screens.storages_screen.storages_cells_config_screen import StoragesCellsConfigScreen


class StoragesRowsConfigScreen(Screen):
    rows_count: int = NumericProperty(0)
    row_sections: ListProperty = ListProperty()

    def on_pre_enter(self):
        """–ü—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è"""
        container = self.ids.rows_inputs_container
        container.clear_widgets()

        for i in range(self.rows_count):
            input_widget = SimpleLabelInputs(
                label_text=f"–Ø—â–∏–∫–æ–≤ –≤ {i + 1} —Ä—è–¥—É ",
                hint_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 3"
            )
            container.add_widget(input_widget)
            self.row_sections.append(input_widget)

    def get_boxes_structure(self) -> list[dict]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —è—â–∏–∫–æ–≤ –ø–æ —Ä—è–¥–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É"""
        boxes = []
        for row_index, input_widget in enumerate(self.row_sections):
            try:
                boxes_count = int(input_widget.ids.input_field.text.strip())
                print('boxes_count', boxes_count)
            except ValueError:
                continue  # –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –Ω–∞—Ö—É–π

            for box_index in range(1, boxes_count + 1):
                boxes.append({
                    "row": row_index + 1,
                    "box": box_index
                })
        return boxes

    def on_continue(self) -> None:
        boxes = self.get_boxes_structure()
        print('on_continue -> boxes', boxes)

        next_screen = self.manager.get_screen("storages_cells_config_screen")

        for box in boxes:
            # –ü—Ä–∏–¥—É–º—ã–≤–∞–µ–º —á–∏—Ç–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ label –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            box['label'] = f"{box['row']} —Ä—è–¥  ‚Äî —è—â–∏–∫ ‚Ññ{box['box']}"  # üü¢ –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º machine_label –µ—Å–ª–∏ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ –∏–º—è (—Ç–∏–ø–∞ "A1")
            box['machine_label'] = f"{chr(64 + box['row'])}{box['box']}"  # üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞

        next_screen.boxes = boxes
        self.manager.current = "storages_cells_config_screen"


